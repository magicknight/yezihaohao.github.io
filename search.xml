<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vuejs2.X组件化-阿里的G2图表组件]]></title>
      <url>https://yezihaohao.github.io/2017/02/14/Vuejs2-X%E7%BB%84%E4%BB%B6%E5%8C%96-%E9%98%BF%E9%87%8C%E7%9A%84G2%E5%9B%BE%E8%A1%A8%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>vue 的组件化开发是一个非常不错的机制.’一处开发,多处引用’，不仅降低的维护成本，提高了开发效率，而且单独的组件有单独的视图和交互数据逻辑，使得系统层次更加分明。若有问题可加群264591039与我讨论~转载文章请标明出处！</p>
</blockquote>
<h3 id="开发场景"><a href="#开发场景" class="headerlink" title="开发场景"></a>开发场景</h3><p>数据可视化是我们互联网常见的功能，所以难免我们会在项目中插入图表等，找到一个还算可以的图形插件，阿里的G2图形库，详情请参见<a href="https://antv.alipay.com/g2/doc/" target="_blank" rel="external">G2官网</a>。接下来就开始我们的Vue G2组件化之旅。</p>
<h3 id="脚手架搭建helloworld"><a href="#脚手架搭建helloworld" class="headerlink" title="脚手架搭建helloworld"></a>脚手架搭建helloworld</h3><p>先用脚手架工具 vue-cli搭建一个vue的helloworld项目(Vue的相关教程请看<a href="https://cn.vuejs.org" target="_blank" rel="external">Vue官网</a>)，按照readme文档正常运行该项目。</p>
<h3 id="安装G2插件"><a href="#安装G2插件" class="headerlink" title="安装G2插件"></a>安装G2插件</h3><p>在package.json的目录下用npm包管理工具安装G2插件库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev g2</div></pre></td></tr></table></figure></p>
<p>我用到的版本是2.2.1，现在最新的好像是2.2.2，应该也没什么问题，不过我没测试过</p>
<h3 id="新建G2Line-vue单文件组件"><a href="#新建G2Line-vue单文件组件" class="headerlink" title="新建G2Line.vue单文件组件"></a>新建G2Line.vue单文件组件</h3><p>在components目录下新建G2Line.vue文件（当前是以线形图为例的组件）。<br>在template标签中新增标签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;!--此处的id用变量，方便同一页面引用多次相同的组件--&gt;</div><div class="line">  &lt;div :id=<span class="string">"id"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<p>在script标签中引入G2并开始先关操作代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">import G2 from <span class="string">'g2'</span>;</div><div class="line">  <span class="built_in">export</span> default &#123;</div><div class="line">    <span class="function"><span class="title">data</span></span> () &#123;</div><div class="line">      <span class="built_in">return</span> &#123;</div><div class="line">        chart: null</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    props: &#123;</div><div class="line">      charData: &#123;</div><div class="line">        <span class="built_in">type</span>: Array,</div><div class="line">        default: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">          <span class="built_in">return</span> &#123;</div><div class="line">            data: [&#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-11"</span>, <span class="string">'value'</span>: 9275501&#125;,  // 测试数据，根据自己需求自己设置数据</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-12"</span>, <span class="string">'value'</span>: 9281904&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-13"</span>, <span class="string">'value'</span>: 9290777&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-14"</span>, <span class="string">'value'</span>: 9297913&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-15"</span>, <span class="string">'value'</span>: 9306918&#125;,</div><div class="line">              &#123;<span class="string">'mzkId'</span>: 112, <span class="string">'strftime'</span>: <span class="string">"2017-01-16"</span>, <span class="string">'value'</span>: 9315641&#125;]</div><div class="line">          &#125;;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      id: String</div><div class="line">    &#125;,</div><div class="line">    mounted: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">//      this.drawChart();       // 第一步想到的是创建的时候更新图表，但是这个不适用于异步请求接口获取相关数据，所以采用下面的监听的方式</div><div class="line">    &#125;,</div><div class="line">    beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">//      this.drawChart();</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">      charData: <span class="keyword">function</span> (val, oldVal) &#123;    // 监听charData，当放生变化时，触发这个回调函数绘制图表</div><div class="line">        console.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal);</div><div class="line">        this.drawChart(val);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      drawChart: <span class="keyword">function</span> (datas) &#123;</div><div class="line">        // 如果图形存在则删除再创建，这个地方感觉稍微有点坑</div><div class="line">        // 具体的G2 api函数说明请看上面提供的官网地址，此处不再逐一说明</div><div class="line">        this.chart &amp;&amp; this.chart.destroy();</div><div class="line">        <span class="built_in">let</span> data = datas;</div><div class="line">        this.chart = new G2.Chart(&#123;</div><div class="line">          id: this.id,</div><div class="line">          width: 1000,</div><div class="line">          height: 250</div><div class="line">        &#125;);</div><div class="line">        this.chart.source(data, &#123;</div><div class="line">          strftime: &#123;</div><div class="line">            <span class="built_in">alias</span>: <span class="string">'日期'</span>,</div><div class="line">            <span class="built_in">type</span>: <span class="string">'cat'</span>,</div><div class="line">            range: [0, 1]</div><div class="line">          &#125;,</div><div class="line">          value: &#123;</div><div class="line">            <span class="built_in">alias</span>: <span class="string">'数量值(人)'</span></div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">        this.chart.line().position(<span class="string">'strftime*value'</span>).size(2);</div><div class="line">        this.chart.point().position(<span class="string">'strftime*value'</span>).color(<span class="string">'#757373'</span>)</div><div class="line">          .shape(<span class="string">'circle'</span>)</div><div class="line">          .label(<span class="string">'value'</span>, &#123;offset: 20, label: &#123;fill: <span class="string">'#000'</span>&#125;&#125;);</div><div class="line">        this.chart.animate(<span class="literal">false</span>);</div><div class="line">        this.chart.render();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="App-vue引入组件并渲染图表"><a href="#App-vue引入组件并渲染图表" class="headerlink" title="App.vue引入组件并渲染图表"></a>App.vue引入组件并渲染图表</h3><p>在app.vue中引入上一步新建的G2Line.vue组件，并加载到当前vue实例中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    import G2Line from <span class="string">'./components/G2Line.vue'</span>;</div><div class="line">    <span class="built_in">export</span> default &#123;</div><div class="line">        components: &#123;</div><div class="line">            G2Line</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="title">data</span></span> () &#123;</div><div class="line">            <span class="built_in">return</span> &#123;</div><div class="line">                serverData: []</div><div class="line">            &#125; </div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            // 此处省略从服务器获取数据并且赋值给this.serverData</div><div class="line">            // 推荐使用axios请求接口</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>获取服务端数据之后，在template中创建组件标签，并将serverData发送给子组件G2Line<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!--同步设置id传送给子组件--&gt;</div><div class="line">&lt;g2-line :charData=<span class="string">"serverData"</span> :id=<span class="string">"'c1'"</span> id=<span class="string">"c1"</span>&gt;&lt;/g2-line&gt;</div></pre></td></tr></table></figure></p>
<h3 id="刷新界面，成功看到页面图表的渲染"><a href="#刷新界面，成功看到页面图表的渲染" class="headerlink" title="刷新界面，成功看到页面图表的渲染"></a>刷新界面，成功看到页面图表的渲染</h3><p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/g2%E6%88%AA%E5%9B%BE.gif" alt="截图"><br><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/g2截图2.gif" alt="截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs爬虫--抓取豆瓣电影网页数据（下）]]></title>
      <url>https://yezihaohao.github.io/2017/02/11/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>接着上篇 <a href="https://yezihaohao.github.io/2017/02/09/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8A%EF%BC%89/">Nodejs爬虫–抓取豆瓣电影网页数据（上）</a><br>  本篇主要描述将上次抓取的数据存入mongodb数据库<br>  前提：百度或谷歌mongodb的安装教程，安装本地并成功运行<br>  推荐一款mongodb数据库可视化管理工具：Robomongo。可以加群264591039获取安装包或自行寻找资源</p>
</blockquote>
<h3 id="首先用npm安装第三方数据库操作包：mongoose"><a href="#首先用npm安装第三方数据库操作包：mongoose" class="headerlink" title="首先用npm安装第三方数据库操作包：mongoose."></a>首先用npm安装第三方数据库操作包：mongoose.</h3><p>关于mongoose详情请查看<a href="http://mongoosejs.com/index.html" target="_blank" rel="external">官方文档</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev mongoose</div></pre></td></tr></table></figure></p>
<h3 id="引入mongoose包开始对mongodb进行管理"><a href="#引入mongoose包开始对mongodb进行管理" class="headerlink" title="引入mongoose包开始对mongodb进行管理"></a>引入mongoose包开始对mongodb进行管理</h3><p>当前目录下新建一个mongo.js文件方便管理，在该文件中引入相关包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> mongoose = require(<span class="string">'mongoose'</span>),</div><div class="line">    assert = require(<span class="string">'assert'</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="获取表构造器Schema并映射mongodb相应的collection"><a href="#获取表构造器Schema并映射mongodb相应的collection" class="headerlink" title="获取表构造器Schema并映射mongodb相应的collection"></a>获取表构造器Schema并映射mongodb相应的collection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> Schema = mongoose.Schema;</div><div class="line"></div><div class="line"><span class="built_in">let</span> filmSchema = new Schema(&#123;       //自定义相应的表数据字段</div><div class="line">        title: String,</div><div class="line">        <span class="built_in">type</span>: String,</div><div class="line">        directories: String,</div><div class="line">        scriptwriter: String,</div><div class="line">        actors: String</div><div class="line">    &#125;);</div><div class="line">//映射collection并生成model对象用于管理数据表的增删改查</div><div class="line">//默认是映射到名为films的collection</div><div class="line">//若自定义表明则：<span class="built_in">let</span> filmSchema = new Schema(&#123;..&#125;, &#123; collection: <span class="string">'data'</span> &#125;);  <span class="string">'data'</span>即为自定义名称</div><div class="line"><span class="built_in">let</span> Film = mongoose.model(<span class="string">'Film'</span>, filmSchema);</div></pre></td></tr></table></figure>
<h3 id="连接mongodb数据库并exports-Film对象"><a href="#连接mongodb数据库并exports-Film对象" class="headerlink" title="连接mongodb数据库并exports Film对象"></a>连接mongodb数据库并exports Film对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> db = mongoose.connect(<span class="string">'mongodb://127.0.0.1:27017/spider'</span>);</div><div class="line">db.connection.on(<span class="string">'error'</span>, (err) =&gt; &#123;</div><div class="line">    console.log(`数据库连接失败：<span class="variable">$&#123;err&#125;</span>`);</div><div class="line">&#125;);</div><div class="line">db.connection.on(<span class="string">'open'</span>, () =&gt; &#123;</div><div class="line">    console.log(<span class="string">'数据库连接成功'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">module.exports = &#123;Film: Film&#125;;</div></pre></td></tr></table></figure>
<h3 id="在spider-js中引入Film对象并添加入库操作代码"><a href="#在spider-js中引入Film对象并添加入库操作代码" class="headerlink" title="在spider.js中引入Film对象并添加入库操作代码"></a>在spider.js中引入Film对象并添加入库操作代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> mongo = require(<span class="string">'./mongo'</span>);</div><div class="line">//在请求网页的end函数中添加入库操作</div><div class="line">xxxx.end((err, res) =&gt; &#123;</div><div class="line">    var $ = cheerio.load(res.text);     //用cheerio获取整个页面DOM对象</div><div class="line">    var _data = &#123;title:<span class="string">''</span>, <span class="built_in">type</span>: <span class="string">''</span>, directories: <span class="string">''</span>, scriptwriter: <span class="string">''</span>, actors: <span class="string">''</span>&#125;;</div><div class="line">    _data.title = $(<span class="string">'#content h1 span'</span>).text();</div><div class="line">    _data.directories = $(<span class="string">'#info .attrs'</span>).eq(0).text();</div><div class="line">    _data.scriptwriter = $(<span class="string">'#info .attrs'</span>).eq(1).text();</div><div class="line">    _data.actors = $(<span class="string">'#info .attrs'</span>).eq(2).text();</div><div class="line">    $(<span class="string">'span[property="v:genre"]'</span>).each(<span class="keyword">function</span> (index) &#123;</div><div class="line">        _data.type += ($(this).text() + (index == $(<span class="string">'span[property="v:genre"]'</span>).length - 1 ? <span class="string">''</span> : <span class="string">'、'</span>));</div><div class="line">    &#125;);</div><div class="line">    console.log(_data);</div><div class="line">    mongo.Film.create(_data, (err, doc) =&gt; &#123;</div><div class="line">                        assert.equal(err, null);</div><div class="line">                        console.log(doc);</div><div class="line">                    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="运行spider-js，并查看数据库中的数据"><a href="#运行spider-js，并查看数据库中的数据" class="headerlink" title="运行spider.js，并查看数据库中的数据"></a>运行spider.js，并查看数据库中的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node spider.js</div><div class="line">//用上述提到的可视化工具查看数据库是否成功有数据入库</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/yezihaohao/yezihaohao.github.io/master/imgs/QQ%E6%88%AA%E5%9B%BE20170211120738.png" alt="数据库截图"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript正则表达式整合]]></title>
      <url>https://yezihaohao.github.io/2017/02/10/Javascript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E5%90%88/</url>
      <content type="html"><![CDATA[<h2 id="项目中常用正则表达式使用整合大全"><a href="#项目中常用正则表达式使用整合大全" class="headerlink" title="项目中常用正则表达式使用整合大全"></a>项目中常用正则表达式使用整合大全</h2><h3 id="提取网页标签内容"><a href="#提取网页标签内容" class="headerlink" title="提取网页标签内容"></a>提取网页标签内容</h3><h4 id="一-单个标签提取"><a href="#一-单个标签提取" class="headerlink" title="一.单个标签提取"></a>一.单个标签提取</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> str = `&lt;a class=<span class="string">"menu"</span>&gt;GitHub&lt;/a&gt;`;</div><div class="line"></div><div class="line"><span class="built_in">let</span> content = str.match(/&lt;a class=<span class="string">"menu"</span>&gt;([\s\S]+)&lt;\/a&gt;/)[1];</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="不定时更新中…"><a href="#不定时更新中…" class="headerlink" title="不定时更新中…"></a>不定时更新中…</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodejs爬虫--抓取豆瓣电影网页数据（上）]]></title>
      <url>https://yezihaohao.github.io/2017/02/09/Nodejs%E7%88%AC%E8%99%AB-%E6%8A%93%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>之前写了一个nodejs的开源爬虫小项目，补上博客详细解析下代码。</p>
<p><code>PS：</code>共有上下两篇，第一篇讲从网站上抓取数据，第二篇讲将抓取的数据存入mongodb数据库。</p>
<h2 id="我们快速开始吧"><a href="#我们快速开始吧" class="headerlink" title="我们快速开始吧"></a>我们快速开始吧</h2><h3 id="首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package-json"><a href="#首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package-json" class="headerlink" title="首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package.json"></a>首先，安装nodejs，然后用npm工具初始化资源管理配置文件：package.json</h3><p>新建spider文件夹，在该文件夹下面初始化package.json<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<h3 id="然后用npm安装相关库文件："><a href="#然后用npm安装相关库文件：" class="headerlink" title="然后用npm安装相关库文件："></a>然后用npm安装相关库文件：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev superagent cheerio eventproxy <span class="keyword">async</span></div></pre></td></tr></table></figure>
<p>在文件夹下面新建spider.js, 在文件中引入需要用到的nodejs模块如下(具体用法请查询网上相关资料)：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>),     <span class="comment">//nodejs里面一个非常方便的客户端代理请求模块，支持get,post,put,delete等</span></div><div class="line">    cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>),           <span class="comment">//类似于jQuery的DOM操作模块，可以提取html中想要的信息</span></div><div class="line">    eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>),     <span class="comment">//控制异步请求并发，可以监听请求，使得某些请求完毕之后在发送请求</span></div><div class="line">    assert = <span class="built_in">require</span>(<span class="string">'assert'</span>),             <span class="comment">//异常抛出判断模块，assert.equal(err, null);  如果err不为null,则直接抛出异常</span></div><div class="line">    <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);              <span class="comment">//控制请求并发连接数</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。"><a href="#用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。" class="headerlink" title="用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。"></a>用superagent请求豆瓣的某个接口，并把所有的页面链接放到一个数组里面，用eventproxy控制监听该请求结束之后才开始请求相应的详情页面。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">superagent.get(URL)</div><div class="line">    .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _pageUrls = [];</div><div class="line">        res.body.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</div><div class="line">           _pageUrls.push(val.url);</div><div class="line">        &#125;);</div><div class="line">        ep.emit(<span class="string">'pageUrls'</span>, _pageUrls);   <span class="comment">//监听相关实例，完成之后告诉pageUrls</span></div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="监听事件完成之后，执行请求相应的豆瓣电影详情页面-并用async控制请求的并发量，可以降低请求的频率和速度"><a href="#监听事件完成之后，执行请求相应的豆瓣电影详情页面-并用async控制请求的并发量，可以降低请求的频率和速度" class="headerlink" title="监听事件完成之后，执行请求相应的豆瓣电影详情页面.并用async控制请求的并发量，可以降低请求的频率和速度"></a>监听事件完成之后，执行请求相应的豆瓣电影详情页面.并用async控制请求的并发量，可以降低请求的频率和速度</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ep = eventproxy.create(<span class="string">'pageUrls'</span>, (pageUrls) =&gt; &#123;      <span class="comment">//创建一个监听实例</span></div><div class="line">    <span class="keyword">let</span> _http = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> _delay = <span class="built_in">parseInt</span>((<span class="built_in">Math</span>.random() * <span class="number">30000000</span>) % <span class="number">1000</span>, <span class="number">10</span>);   <span class="comment">//随机延时请求</span></div><div class="line">        superagent.get(url)</div><div class="line">            .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</div><div class="line">                <span class="keyword">var</span> $ = cheerio.load(res.text);     <span class="comment">//用cheerio获取整个页面DOM对象</span></div><div class="line">                <span class="keyword">var</span> _data = &#123;<span class="attr">title</span>:<span class="string">''</span>, <span class="attr">type</span>: <span class="string">''</span>, <span class="attr">directories</span>: <span class="string">''</span>, <span class="attr">scriptwriter</span>: <span class="string">''</span>, <span class="attr">actors</span>: <span class="string">''</span>&#125;;</div><div class="line">                _data.title = $(<span class="string">'#content h1 span'</span>).text();</div><div class="line">                _data.directories = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">0</span>).text();</div><div class="line">                _data.scriptwriter = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">1</span>).text();</div><div class="line">                _data.actors = $(<span class="string">'#info .attrs'</span>).eq(<span class="number">2</span>).text();</div><div class="line">                $(<span class="string">'span[property="v:genre"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</div><div class="line">                    _data.type += ($(<span class="keyword">this</span>).text() + (index == $(<span class="string">'span[property="v:genre"]'</span>).length - <span class="number">1</span> ? <span class="string">''</span> : <span class="string">'、'</span>));</div><div class="line">                &#125;);</div><div class="line">                <span class="built_in">console</span>.log(_data);</div><div class="line">            &#125;);</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            callback(<span class="literal">null</span>, url);</div><div class="line">        &#125;, _delay);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">async</span>.mapLimit(pageUrls, <span class="number">3</span>, (url, callback) =&gt; &#123;  <span class="comment">//用async 的 mapLimit(arr, limit, iterator, callback) 接口控制请求并发量为3</span></div><div class="line">        _http(url, callback);</div><div class="line">    &#125;, (err, res) =&gt; &#123;</div><div class="line">        assert.equal(err, <span class="literal">null</span>);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！"><a href="#本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！" class="headerlink" title="本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！"></a>本章节结束，未完待续…下期是怎么将抓取的数据存入mongodb数据库！</h2>]]></content>
    </entry>
    
  
  
</search>
